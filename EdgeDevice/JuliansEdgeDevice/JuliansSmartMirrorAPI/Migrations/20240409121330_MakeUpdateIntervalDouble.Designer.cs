// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SmartMirror.Migrations
{
    [DbContext(typeof(SmartMirrorContext))]
    [Migration("20240409121330_MakeUpdateIntervalDouble")]
    partial class MakeUpdateIntervalDouble
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("ConditionalRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("MotionEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<float>("TemperatureThreshold")
                        .HasColumnType("REAL");

                    b.Property<double>("UpdateInterval")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("ConditionalRule");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MotionEnabled = true,
                            TemperatureThreshold = 25f,
                            UpdateInterval = 1.0
                        });
                });

            modelBuilder.Entity("SensorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Motion")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SensorData");
                });
#pragma warning restore 612, 618
        }
    }
}
